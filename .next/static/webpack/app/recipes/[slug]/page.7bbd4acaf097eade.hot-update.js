"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/recipes/[slug]/page",{

/***/ "(app-pages-browser)/./app/recipes/data/coding-agent.ts":
/*!******************************************!*\
  !*** ./app/recipes/data/coding-agent.ts ***!
  \******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   codingAgent: function() { return /* binding */ codingAgent; }\n/* harmony export */ });\nconst codingAgent = {\n    title: \"Coding Agent\",\n    tag: \"Agent\",\n    description: \"A sophisticated workflow for AI-powered code generation that implements a robust process of task clarification, code writing, and test-driven development.\",\n    explanation: \"The diagram illustrates a comprehensive coding agent workflow with two main loops. The first loop ('Until tasks clear') handles task clarification between the human and LLM through the interface. The second loop ('Until tests pass') manages the code generation and testing process, where the LLM interacts with the environment to write, test, and refine code until it meets the specified requirements.\",\n    useCases: [\n        \"Automated Code Generation: Generate code based on natural language descriptions with built-in testing and validation.\",\n        \"Code Refactoring: Analyze existing code and suggest improvements while maintaining functionality.\",\n        \"Test-Driven Development: Generate test cases and implementation code iteratively.\"\n    ],\n    pythonCode: 'from typing import List, Dict, Any, Optional\\nfrom pydantic import BaseModel\\nfrom helpers import run_llm, JSON_llm, execute_command\\n\\nclass Requirement(BaseModel):\\n    \"\"\"Represents a clarified requirement\"\"\"\\n    description: str\\n    acceptance_criteria: List[str]\\n    test_cases: List[Dict[str, Any]]\\n\\nclass TestResult(BaseModel):\\n    \"\"\"Represents the result of running tests\"\"\"\\n    passed: bool\\n    failed_tests: List[str]\\n    error_messages: List[str]\\n    coverage: float\\n\\nclass CodingAgent:\\n    def __init__(self):\\n        self.requirements: List[Requirement] = []\\n        self.current_code: str = \"\"\\n        self.test_code: str = \"\"\\n        \\n    async def clarify_requirements(self, task_description: str) -> List[Requirement]:\\n        \"\"\"Clarify requirements through interaction with LLM\"\"\"\\n        CLARIFICATION_PROMPT = \"\"\"Analyze this coding task and break it down into clear requirements.\\n        For each requirement:\\n        1. Provide a clear description\\n        2. List specific acceptance criteria\\n        3. Define test cases with inputs and expected outputs\\n        \\n        Task: {task}\\n        \\n        Return as JSON array of requirements.\"\"\"\\n        \\n        self.requirements = await JSON_llm(\\n            CLARIFICATION_PROMPT.format(task=task_description),\\n            List[Requirement]\\n        )\\n        \\n        return self.requirements\\n    \\n    async def generate_test_code(self) -> str:\\n        \"\"\"Generate test code based on requirements\"\"\"\\n        TEST_PROMPT = \"\"\"Generate pytest test code for these requirements:\\n        {requirements}\\n        \\n        Include:\\n        1. Test cases for each requirement\\n        2. Edge cases and error conditions\\n        3. Proper test organization and setup\\n        \\n        Return only the test code.\"\"\"\\n        \\n        self.test_code = await run_llm(\\n            TEST_PROMPT.format(requirements=self.requirements)\\n        )\\n        \\n        return self.test_code\\n    \\n    async def generate_implementation(self) -> str:\\n        \"\"\"Generate implementation code based on requirements and tests\"\"\"\\n        IMPLEMENTATION_PROMPT = \"\"\"Generate implementation code that satisfies these requirements and passes these tests:\\n        \\n        Requirements:\\n        {requirements}\\n        \\n        Test Code:\\n        {test_code}\\n        \\n        Follow these guidelines:\\n        1. Write clean, well-documented code\\n        2. Include type hints\\n        3. Handle edge cases\\n        4. Follow PEP 8 style guide\\n        \\n        Return only the implementation code.\"\"\"\\n        \\n        self.current_code = await run_llm(\\n            IMPLEMENTATION_PROMPT.format(\\n                requirements=self.requirements,\\n                test_code=self.test_code\\n            )\\n        )\\n        \\n        return self.current_code\\n    \\n    async def run_tests(self) -> TestResult:\\n        \"\"\"Run tests and return results\"\"\"\\n        try:\\n            # Save code to temporary files\\n            with open(\"temp_implementation.py\", \"w\") as f:\\n                f.write(self.current_code)\\n            with open(\"temp_test.py\", \"w\") as f:\\n                f.write(self.test_code)\\n            \\n            # Run pytest with coverage\\n            result = await execute_command(\\n                \"pytest temp_test.py --cov=temp_implementation -v\"\\n            )\\n            \\n            # Parse test results\\n            return TestResult(\\n                passed=result.returncode == 0,\\n                failed_tests=self._parse_failed_tests(result.output),\\n                error_messages=self._parse_error_messages(result.output),\\n                coverage=self._parse_coverage(result.output)\\n            )\\n        finally:\\n            # Cleanup temporary files\\n            await execute_command(\"rm temp_implementation.py temp_test.py\")\\n    \\n    async def fix_issues(self, test_result: TestResult) -> str:\\n        \"\"\"Fix issues based on test results\"\"\"\\n        FIX_PROMPT = \"\"\"Fix the following issues in the code:\\n        \\n        Current Code:\\n        {code}\\n        \\n        Test Results:\\n        Failed Tests: {failed_tests}\\n        Error Messages: {errors}\\n        \\n        Return the fixed implementation code.\"\"\"\\n        \\n        self.current_code = await run_llm(\\n            FIX_PROMPT.format(\\n                code=self.current_code,\\n                failed_tests=test_result.failed_tests,\\n                errors=test_result.error_messages\\n            )\\n        )\\n        \\n        return self.current_code\\n    \\n    async def process_task(self, task_description: str, max_iterations: int = 5) -> str:\\n        \"\"\"Process a coding task from start to finish\"\"\"\\n        print(\"1. Clarifying Requirements...\")\\n        requirements = await self.clarify_requirements(task_description)\\n        for i, req in enumerate(requirements, 1):\\n            print(f\"\\\\nRequirement {i}:\")\\n            print(f\"Description: {req.description}\")\\n            print(\"Acceptance Criteria:\")\\n            for ac in req.acceptance_criteria:\\n                print(f\"- {ac}\")\\n        \\n        print(\"\\\\n2. Generating Tests...\")\\n        test_code = await self.generate_test_code()\\n        print(\"Test code generated.\")\\n        \\n        print(\"\\\\n3. Implementing Solution...\")\\n        implementation = await self.generate_implementation()\\n        print(\"Initial implementation complete.\")\\n        \\n        iteration = 0\\n        while iteration < max_iterations:\\n            print(f\"\\\\n4. Running Tests (Iteration {iteration + 1})...\")\\n            test_result = await self.run_tests()\\n            \\n            print(f\"Tests Passed: {test_result.passed}\")\\n            print(f\"Coverage: {test_result.coverage}%\")\\n            \\n            if test_result.passed and test_result.coverage >= 90:\\n                print(\"\\\\nAll tests passed with good coverage!\")\\n                break\\n            \\n            print(\"\\\\n5. Fixing Issues...\")\\n            await self.fix_issues(test_result)\\n            iteration += 1\\n        \\n        return self.current_code\\n\\n# Example usage\\nasync def main():\\n    task = \"\"\"\\n    Create a function that processes a list of financial transactions.\\n    Requirements:\\n    1. Calculate total amount, average transaction size\\n    2. Identify outliers (transactions > 2 standard deviations from mean)\\n    3. Group transactions by category\\n    4. Handle invalid inputs appropriately\\n    \"\"\"\\n    \\n    agent = CodingAgent()\\n    final_code = await agent.process_task(task)\\n    print(\"\\\\nFinal Implementation:\\\\n\", final_code)\\n\\nif __name__ == \"__main__\":\\n    import asyncio\\n    asyncio.run(main())',\n    typescriptCode: 'import { LLMResponse } from \\'./types\\';\\nimport { runLLM, JSONLLM, executeCommand } from \\'./helpers\\';\\n\\ninterface Requirement {\\n  description: string;\\n  acceptance_criteria: string[];\\n  test_cases: Array<Record<string, any>>;\\n}\\n\\ninterface TestResult {\\n  passed: boolean;\\n  failed_tests: string[];\\n  error_messages: string[];\\n  coverage: number;\\n}\\n\\nclass CodingAgent {\\n  private requirements: Requirement[] = [];\\n  private currentCode: string = \"\";\\n  private testCode: string = \"\";\\n\\n  async clarifyRequirements(taskDescription: string): Promise<Requirement[]> {\\n    const CLARIFICATION_PROMPT = `Analyze this coding task and break it down into clear requirements.\\n    For each requirement:\\n    1. Provide a clear description\\n    2. List specific acceptance criteria\\n    3. Define test cases with inputs and expected outputs\\n    \\n    Task: ${taskDescription}\\n    \\n    Return as JSON array of requirements.`;\\n\\n    this.requirements = await JSONLLM<Requirement[]>(CLARIFICATION_PROMPT);\\n    return this.requirements;\\n  }\\n\\n  async generateTestCode(): Promise<string> {\\n    const TEST_PROMPT = `Generate Jest test code for these requirements:\\n    ${JSON.stringify(this.requirements, null, 2)}\\n    \\n    Include:\\n    1. Test cases for each requirement\\n    2. Edge cases and error conditions\\n    3. Proper test organization and setup\\n    \\n    Return only the test code.`;\\n\\n    this.testCode = await runLLM(TEST_PROMPT);\\n    return this.testCode;\\n  }\\n\\n  async generateImplementation(): Promise<string> {\\n    const IMPLEMENTATION_PROMPT = `Generate implementation code that satisfies these requirements and passes these tests:\\n    \\n    Requirements:\\n    ${JSON.stringify(this.requirements, null, 2)}\\n    \\n    Test Code:\\n    ${this.testCode}\\n    \\n    Follow these guidelines:\\n    1. Write clean, well-documented code\\n    2. Include TypeScript types\\n    3. Handle edge cases\\n    4. Follow standard style guide\\n    \\n    Return only the implementation code.`;\\n\\n    this.currentCode = await runLLM(IMPLEMENTATION_PROMPT);\\n    return this.currentCode;\\n  }\\n\\n  async runTests(): Promise<TestResult> {\\n    try {\\n      // Save code to temporary files\\n      await executeCommand(`\\n        echo \\'${this.currentCode}\\' > temp_implementation.ts\\n        echo \\'${this.testCode}\\' > temp_test.ts\\n      `);\\n\\n      // Run Jest with coverage\\n      const result = await executeCommand(\\n        \"jest temp_test.ts --coverage --json\"\\n      );\\n\\n      // Parse test results from JSON output\\n      const testResults = JSON.parse(result.output);\\n\\n      return {\\n        passed: testResults.success,\\n        failed_tests: this.parseFailedTests(testResults),\\n        error_messages: this.parseErrorMessages(testResults),\\n        coverage: this.parseCoverage(testResults)\\n      };\\n    } finally {\\n      // Cleanup temporary files\\n      await executeCommand(\"rm temp_implementation.ts temp_test.ts\");\\n    }\\n  }\\n\\n  async fixIssues(testResult: TestResult): Promise<string> {\\n    const FIX_PROMPT = `Fix the following issues in the code:\\n    \\n    Current Code:\\n    ${this.currentCode}\\n    \\n    Test Results:\\n    Failed Tests: ${JSON.stringify(testResult.failed_tests)}\\n    Error Messages: ${JSON.stringify(testResult.error_messages)}\\n    \\n    Return the fixed implementation code.`;\\n\\n    this.currentCode = await runLLM(FIX_PROMPT);\\n    return this.currentCode;\\n  }\\n\\n  async processTask(\\n    taskDescription: string,\\n    maxIterations: number = 5\\n  ): Promise<string> {\\n    console.log(\"1. Clarifying Requirements...\");\\n    const requirements = await this.clarifyRequirements(taskDescription);\\n    requirements.forEach((req, i) => {\\n      console.log(`\\\\nRequirement ${i + 1}:`);\\n      console.log(`Description: ${req.description}`);\\n      console.log(\"Acceptance Criteria:\");\\n      req.acceptance_criteria.forEach(ac => console.log(`- ${ac}`));\\n    });\\n\\n    console.log(\"\\\\n2. Generating Tests...\");\\n    await this.generateTestCode();\\n    console.log(\"Test code generated.\");\\n\\n    console.log(\"\\\\n3. Implementing Solution...\");\\n    await this.generateImplementation();\\n    console.log(\"Initial implementation complete.\");\\n\\n    let iteration = 0;\\n    while (iteration < maxIterations) {\\n      console.log(`\\\\n4. Running Tests (Iteration ${iteration + 1})...`);\\n      const testResult = await this.runTests();\\n\\n      console.log(`Tests Passed: ${testResult.passed}`);\\n      console.log(`Coverage: ${testResult.coverage}%`);\\n\\n      if (testResult.passed && testResult.coverage >= 90) {\\n        console.log(\"\\\\nAll tests passed with good coverage!\");\\n        break;\\n      }\\n\\n      console.log(\"\\\\n5. Fixing Issues...\");\\n      await this.fixIssues(testResult);\\n      iteration++;\\n    }\\n\\n    return this.currentCode;\\n  }\\n\\n  private parseFailedTests(testResults: any): string[] {\\n    // Implementation of test results parsing\\n    return [];\\n  }\\n\\n  private parseErrorMessages(testResults: any): string[] {\\n    // Implementation of error message parsing\\n    return [];\\n  }\\n\\n  private parseCoverage(testResults: any): number {\\n    // Implementation of coverage parsing\\n    return 0;\\n  }\\n}\\n\\n// Example usage\\nasync function main() {\\n  const task = `\\n    Create a function that processes a list of financial transactions.\\n    Requirements:\\n    1. Calculate total amount, average transaction size\\n    2. Identify outliers (transactions > 2 standard deviations from mean)\\n    3. Group transactions by category\\n    4. Handle invalid inputs appropriately\\n  `;\\n\\n  const agent = new CodingAgent();\\n  const finalCode = await agent.processTask(task);\\n  console.log(\"\\\\nFinal Implementation:\\\\n\", finalCode);\\n}\\n\\nmain().catch(console.error);'\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/recipes/data/coding-agent.ts\n"));

/***/ })

});