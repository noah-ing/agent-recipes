"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/recipes/[slug]/page",{

/***/ "(app-pages-browser)/./app/recipes/data/parallelization.ts":
/*!*********************************************!*\
  !*** ./app/recipes/data/parallelization.ts ***!
  \*********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parallelization: function() { return /* binding */ parallelization; }\n/* harmony export */ });\nconst parallelization = {\n    title: \"Parallelization\",\n    tag: \"Workflow\",\n    description: \"Parallelization is a powerful workflow that leverages concurrent processing to handle multiple subtasks or aspects of a problem simultaneously. This approach significantly improves efficiency, especially for complex tasks that can be broken down into independent components.\",\n    explanation: \"The diagram shows how a single input is distributed to multiple LLM processes that operate independently and simultaneously on different aspects of the task. The results from these parallel processes are then aggregated to produce a final, comprehensive output.\",\n    useCases: [\n        \"Multi-aspect Content Analysis: Simultaneously analyze sentiment, extract key entities, and summarize text.\",\n        \"Ensemble Learning: Generate multiple solutions using different models or prompts, then combine results.\",\n        \"Parallel Data Processing: Process large datasets by dividing them into chunks and analyzing concurrently.\"\n    ],\n    pythonCode: 'from typing import List, Dict, Any\\nimport asyncio\\nfrom helpers import run_llm\\n\\nasync def analyze_content(text: str, aspect: str, prompt: str) -> Dict[str, Any]:\\n    \"\"\"Analyze content for a specific aspect using an LLM.\"\"\"\\n    response = await run_llm(\\n        f\"{prompt}\\\\nContent: {text}\",\\n        model=\"meta-llama/Meta-Llama-3.1-70B-Instruct-Turbo\"\\n    )\\n    return {aspect: response}\\n\\nasync def parallel_analysis_workflow(content: str) -> Dict[str, Any]:\\n    \"\"\"Analyze content in parallel across multiple dimensions.\"\"\"\\n    analysis_tasks = {\\n        \"sentiment\": \"Analyze ONLY the sentiment of this content. Rate it from 1-10 and explain why.\",\\n        \"key_points\": \"Extract ONLY the 3-5 most important key points from this content.\",\\n        \"audience\": \"Identify ONLY the target audience for this content and explain why.\",\\n        \"style\": \"Analyze ONLY the writing style and tone of this content.\",\\n        \"suggestions\": \"Provide ONLY 2-3 specific suggestions to improve this content.\"\\n    }\\n    \\n    # Create tasks for parallel execution\\n    tasks = [\\n        analyze_content(content, aspect, prompt)\\n        for aspect, prompt in analysis_tasks.items()\\n    ]\\n    \\n    # Execute all analysis tasks in parallel\\n    results = await asyncio.gather(*tasks)\\n    \\n    # Combine results into a single dictionary\\n    combined_analysis = {}\\n    for result in results:\\n        combined_analysis.update(result)\\n    \\n    return combined_analysis\\n\\n# Example usage\\nasync def main():\\n    blog_post = \"\"\"\\n    Artificial Intelligence has transformed the way we work and live. From virtual \\n    assistants to autonomous vehicles, AI technologies are becoming increasingly \\n    prevalent in our daily lives. While these advancements offer numerous benefits, \\n    they also raise important ethical considerations that society must address.\\n    \"\"\"\\n    \\n    print(\"Starting parallel content analysis...\")\\n    analysis = await parallel_analysis_workflow(blog_post)\\n    \\n    # Print results in a structured format\\n    for aspect, result in analysis.items():\\n        print(f\"\\\\n{aspect.upper()}:\")\\n        print(\"-\" * 40)\\n        print(result)\\n\\nif __name__ == \"__main__\":\\n    asyncio.run(main())',\n    typescriptCode: 'import { LLMResponse } from \\'./types\\';\\nimport { runLLM } from \\'./helpers\\';\\n\\ninterface AnalysisResult {\\n  [key: string]: string;\\n}\\n\\nasync function analyzeContent(\\n  text: string,\\n  aspect: string,\\n  prompt: string\\n): Promise<AnalysisResult> {\\n  const response = await runLLM({\\n    prompt: `${prompt}\\\\nContent: ${text}`,\\n    model: \"meta-llama/Meta-Llama-3.1-70B-Instruct-Turbo\"\\n  });\\n  return { [aspect]: response };\\n}\\n\\nasync function parallelAnalysisWorkflow(\\n  content: string\\n): Promise<AnalysisResult> {\\n  const analysisTasks = {\\n    sentiment: \"Analyze ONLY the sentiment of this content. Rate it from 1-10 and explain why.\",\\n    key_points: \"Extract ONLY the 3-5 most important key points from this content.\",\\n    audience: \"Identify ONLY the target audience for this content and explain why.\",\\n    style: \"Analyze ONLY the writing style and tone of this content.\",\\n    suggestions: \"Provide ONLY 2-3 specific suggestions to improve this content.\"\\n  };\\n\\n  // Create and execute all analysis tasks in parallel\\n  const tasks = Object.entries(analysisTasks).map(([aspect, prompt]) =>\\n    analyzeContent(content, aspect, prompt)\\n  );\\n\\n  // Wait for all tasks to complete\\n  const results = await Promise.all(tasks);\\n\\n  // Combine results into a single object\\n  return results.reduce((acc, result) => ({ ...acc, ...result }), {});\\n}\\n\\n// Example usage\\nasync function main() {\\n  const blogPost = `\\n    Artificial Intelligence has transformed the way we work and live. From virtual \\n    assistants to autonomous vehicles, AI technologies are becoming increasingly \\n    prevalent in our daily lives. While these advancements offer numerous benefits, \\n    they also raise important ethical considerations that society must address.\\n  `;\\n\\n  console.log(\"Starting parallel content analysis...\");\\n  const analysis = await parallelAnalysisWorkflow(blogPost);\\n\\n  // Print results in a structured format\\n  Object.entries(analysis).forEach(([aspect, result]) => {\\n    console.log(`\\\\n${aspect.toUpperCase()}:`);\\n    console.log(\"-\".repeat(40));\\n    console.log(result);\\n  });\\n}\\n\\nmain().catch(console.error);'\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/recipes/data/parallelization.ts\n"));

/***/ })

});