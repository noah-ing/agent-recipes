"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/recipes/[slug]/page",{

/***/ "(app-pages-browser)/./app/recipes/data/evaluator-optimizer.ts":
/*!*************************************************!*\
  !*** ./app/recipes/data/evaluator-optimizer.ts ***!
  \*************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   evaluatorOptimizer: function() { return /* binding */ evaluatorOptimizer; }\n/* harmony export */ });\nconst evaluatorOptimizer = {\n    title: \"Evaluator-optimizer\",\n    tag: \"Loops\",\n    description: \"The Evaluator-Optimizer workflow is an iterative process designed to progressively improve outputs through repeated evaluation and refinement. This approach is particularly useful for tasks that require high accuracy or quality.\",\n    explanation: \"The diagram illustrates a cyclical process where an initial solution is evaluated, and if it doesn't meet the criteria, it's passed to an optimizer for refinement. This cycle continues until a satisfactory solution is found or a maximum number of iterations is reached.\",\n    useCases: [\n        \"Content Refinement: Iteratively improve written content by checking tone, clarity, and engagement.\",\n        \"Code Optimization: Generate and improve code solutions by evaluating performance and best practices.\",\n        \"Data Analysis Reports: Progressively refine reports by evaluating completeness and clarity of insights.\"\n    ],\n    pythonCode: 'from typing import Dict, Any, List, Optional\\nfrom pydantic import BaseModel\\nfrom helpers import run_llm, JSON_llm\\n\\nclass EvaluationResult(BaseModel):\\n    \"\"\"Evaluation results with scores and feedback\"\"\"\\n    scores: Dict[str, float]\\n    feedback: List[str]\\n    meets_criteria: bool\\n\\nclass OptimizationResult(BaseModel):\\n    \"\"\"Optimization result with improved content\"\"\"\\n    content: str\\n    changes_made: List[str]\\n\\nasync def evaluate_content(\\n    content: str,\\n    criteria: Dict[str, str]\\n) -> EvaluationResult:\\n    \"\"\"Evaluate content against specified criteria\"\"\"\\n    \\n    EVAL_PROMPT = \"\"\"Evaluate the following content against these criteria:\\n    {criteria}\\n    \\n    For each criterion:\\n    1. Assign a score (0-10)\\n    2. Provide specific feedback\\n    3. Indicate if it meets the minimum threshold (7/10)\\n    \\n    Return as JSON with:\\n    - scores: Dict[str, float]\\n    - feedback: List[str]\\n    - meets_criteria: bool (true if all scores >= 7)\\n    \"\"\"\\n    \\n    evaluation = await JSON_llm(\\n        EVAL_PROMPT.format(\\n            criteria=\"\\\\n\".join(f\"- {k}: {v}\" for k, v in criteria.items())\\n        ) + f\"\\\\n\\\\nContent:\\\\n{content}\",\\n        EvaluationResult\\n    )\\n    \\n    return evaluation\\n\\nasync def optimize_content(\\n    content: str,\\n    evaluation: EvaluationResult\\n) -> OptimizationResult:\\n    \"\"\"Optimize content based on evaluation feedback\"\"\"\\n    \\n    OPTIMIZE_PROMPT = \"\"\"Improve the following content based on this feedback:\\n    {feedback}\\n    \\n    Return as JSON with:\\n    - content: improved version\\n    - changes_made: list of specific improvements made\\n    \"\"\"\\n    \\n    optimization = await JSON_llm(\\n        OPTIMIZE_PROMPT.format(\\n            feedback=\"\\\\n\".join(f\"- {f}\" for f in evaluation.feedback)\\n        ) + f\"\\\\n\\\\nOriginal Content:\\\\n{content}\",\\n        OptimizationResult\\n    )\\n    \\n    return optimization\\n\\nasync def evaluator_optimizer_workflow(\\n    initial_content: str,\\n    criteria: Dict[str, str],\\n    max_iterations: int = 5\\n) -> str:\\n    \"\"\"Iteratively improve content through evaluation and optimization\"\"\"\\n    \\n    content = initial_content\\n    iteration = 0\\n    \\n    while iteration < max_iterations:\\n        print(f\"\\\\nIteration {iteration + 1}\")\\n        print(\"-\" * 40)\\n        \\n        # Evaluate current content\\n        evaluation = await evaluate_content(content, criteria)\\n        \\n        # Print evaluation results\\n        print(\"\\\\nEvaluation Scores:\")\\n        for criterion, score in evaluation.scores.items():\\n            print(f\"{criterion}: {score}/10\")\\n        \\n        print(\"\\\\nFeedback:\")\\n        for feedback in evaluation.feedback:\\n            print(f\"- {feedback}\")\\n        \\n        # Check if content meets all criteria\\n        if evaluation.meets_criteria:\\n            print(\"\\\\nSuccess! All criteria met.\")\\n            break\\n        \\n        # Optimize content based on evaluation\\n        optimization = await optimize_content(content, evaluation)\\n        content = optimization.content\\n        \\n        print(\"\\\\nImprovements Made:\")\\n        for change in optimization.changes_made:\\n            print(f\"- {change}\")\\n        \\n        iteration += 1\\n    \\n    return content\\n\\n# Example usage\\nasync def main():\\n    blog_post = \"\"\"\\n    AI is changing everything. It\\'s making things faster and better. \\n    Companies are using it a lot. Some people are worried about it \\n    but it\\'s probably fine. Everyone should learn about AI because \\n    it\\'s important for the future.\\n    \"\"\"\\n    \\n    criteria = {\\n        \"clarity\": \"Ideas should be clearly explained with specific examples\",\\n        \"depth\": \"Content should provide meaningful insights and analysis\",\\n        \"engagement\": \"Writing should be engaging and maintain reader interest\",\\n        \"professionalism\": \"Tone should be professional and authoritative\",\\n        \"structure\": \"Content should be well-organized with logical flow\"\\n    }\\n    \\n    final_content = await evaluator_optimizer_workflow(blog_post, criteria)\\n    print(\"\\\\nFinal Optimized Content:\\\\n\", final_content)\\n\\nif __name__ == \"__main__\":\\n    import asyncio\\n    asyncio.run(main())',\n    typescriptCode: 'import { LLMResponse } from \\'./types\\';\\nimport { runLLM, JSONLLM } from \\'./helpers\\';\\n\\ninterface EvaluationResult {\\n  scores: Record<string, number>;\\n  feedback: string[];\\n  meets_criteria: boolean;\\n}\\n\\ninterface OptimizationResult {\\n  content: string;\\n  changes_made: string[];\\n}\\n\\nasync function evaluateContent(\\n  content: string,\\n  criteria: Record<string, string>\\n): Promise<EvaluationResult> {\\n  const EVAL_PROMPT = `Evaluate the following content against these criteria:\\n  ${Object.entries(criteria)\\n    .map(([k, v]) => `- ${k}: ${v}`)\\n    .join(\\'\\\\n\\')}\\n  \\n  For each criterion:\\n  1. Assign a score (0-10)\\n  2. Provide specific feedback\\n  3. Indicate if it meets the minimum threshold (7/10)\\n  \\n  Return as JSON with:\\n  - scores: Record<string, number>\\n  - feedback: string[]\\n  - meets_criteria: boolean (true if all scores >= 7)\\n  `;\\n\\n  return await JSONLLM<EvaluationResult>(\\n    `${EVAL_PROMPT}\\\\n\\\\nContent:\\\\n${content}`\\n  );\\n}\\n\\nasync function optimizeContent(\\n  content: string,\\n  evaluation: EvaluationResult\\n): Promise<OptimizationResult> {\\n  const OPTIMIZE_PROMPT = `Improve the following content based on this feedback:\\n  ${evaluation.feedback.map(f => `- ${f}`).join(\\'\\\\n\\')}\\n  \\n  Return as JSON with:\\n  - content: improved version\\n  - changes_made: list of specific improvements made\\n  `;\\n\\n  return await JSONLLM<OptimizationResult>(\\n    `${OPTIMIZE_PROMPT}\\\\n\\\\nOriginal Content:\\\\n${content}`\\n  );\\n}\\n\\nasync function evaluatorOptimizerWorkflow(\\n  initialContent: string,\\n  criteria: Record<string, string>,\\n  maxIterations: number = 5\\n): Promise<string> {\\n  let content = initialContent;\\n  let iteration = 0;\\n\\n  while (iteration < maxIterations) {\\n    console.log(`\\\\nIteration ${iteration + 1}`);\\n    console.log(\"-\".repeat(40));\\n\\n    // Evaluate current content\\n    const evaluation = await evaluateContent(content, criteria);\\n\\n    // Print evaluation results\\n    console.log(\"\\\\nEvaluation Scores:\");\\n    Object.entries(evaluation.scores).forEach(([criterion, score]) => {\\n      console.log(`${criterion}: ${score}/10`);\\n    });\\n\\n    console.log(\"\\\\nFeedback:\");\\n    evaluation.feedback.forEach(feedback => {\\n      console.log(`- ${feedback}`);\\n    });\\n\\n    // Check if content meets all criteria\\n    if (evaluation.meets_criteria) {\\n      console.log(\"\\\\nSuccess! All criteria met.\");\\n      break;\\n    }\\n\\n    // Optimize content based on evaluation\\n    const optimization = await optimizeContent(content, evaluation);\\n    content = optimization.content;\\n\\n    console.log(\"\\\\nImprovements Made:\");\\n    optimization.changes_made.forEach(change => {\\n      console.log(`- ${change}`);\\n    });\\n\\n    iteration++;\\n  }\\n\\n  return content;\\n}\\n\\n// Example usage\\nasync function main() {\\n  const blogPost = `\\n    AI is changing everything. It\\'s making things faster and better. \\n    Companies are using it a lot. Some people are worried about it \\n    but it\\'s probably fine. Everyone should learn about AI because \\n    it\\'s important for the future.\\n  `;\\n\\n  const criteria = {\\n    clarity: \"Ideas should be clearly explained with specific examples\",\\n    depth: \"Content should provide meaningful insights and analysis\",\\n    engagement: \"Writing should be engaging and maintain reader interest\",\\n    professionalism: \"Tone should be professional and authoritative\",\\n    structure: \"Content should be well-organized with logical flow\"\\n  };\\n\\n  const finalContent = await evaluatorOptimizerWorkflow(blogPost, criteria);\\n  console.log(\"\\\\nFinal Optimized Content:\\\\n\", finalContent);\\n}\\n\\nmain().catch(console.error);'\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/recipes/data/evaluator-optimizer.ts\n"));

/***/ })

});