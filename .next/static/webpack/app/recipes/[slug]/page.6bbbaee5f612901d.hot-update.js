"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/recipes/[slug]/page",{

/***/ "(app-pages-browser)/./app/recipes/data/augmented-llm.ts":
/*!*******************************************!*\
  !*** ./app/recipes/data/augmented-llm.ts ***!
  \*******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   augmentedLlm: function() { return /* binding */ augmentedLlm; }\n/* harmony export */ });\nconst augmentedLlm = {\n    title: \"Augmented LLM\",\n    tag: \"Architecture\",\n    description: \"An enhanced LLM architecture that extends the model's capabilities through integration with external retrieval systems, tools, and memory components.\",\n    explanation: \"The diagram shows how an LLM can be augmented with three key components: a retrieval system for accessing external knowledge, tools for performing specific actions, and a memory system for maintaining context. These components interact bidirectionally with the LLM, allowing it to query information, use tools, and maintain state across interactions.\",\n    useCases: [\n        \"Knowledge-Intensive Tasks: Augment LLM responses with real-time information from external sources.\",\n        \"Tool-Using Agents: Enable LLMs to interact with external tools and APIs to perform specific actions.\",\n        \"Stateful Applications: Maintain conversation history and context across multiple interactions.\"\n    ],\n    pythonCode: 'from typing import List, Dict, Any, Optional\\nfrom pydantic import BaseModel\\nfrom datetime import datetime\\nimport chromadb\\nfrom helpers import run_llm, JSON_llm, execute_tool\\n\\nclass Memory(BaseModel):\\n    \"\"\"Represents a memory entry\"\"\"\\n    timestamp: datetime\\n    content: str\\n    type: str\\n    metadata: Dict[str, Any]\\n\\nclass RetrievalResult(BaseModel):\\n    \"\"\"Represents a retrieval result\"\"\"\\n    content: str\\n    source: str\\n    relevance: float\\n\\nclass AugmentedLLM:\\n    def __init__(self):\\n        # Initialize components\\n        self.memory = []\\n        self.retrieval_client = chromadb.Client()\\n        self.tools = self._initialize_tools()\\n        \\n    def _initialize_tools(self) -> Dict[str, Any]:\\n        \"\"\"Initialize available tools\"\"\"\\n        return {\\n            \"calculator\": {\\n                \"description\": \"Perform mathematical calculations\",\\n                \"function\": self._calculate\\n            },\\n            \"web_search\": {\\n                \"description\": \"Search the web for information\",\\n                \"function\": self._search_web\\n            },\\n            \"database\": {\\n                \"description\": \"Query a database\",\\n                \"function\": self._query_database\\n            }\\n        }\\n    \\n    async def retrieve_relevant_info(\\n        self, \\n        query: str,\\n        k: int = 5\\n    ) -> List[RetrievalResult]:\\n        \"\"\"Retrieve relevant information from the knowledge base\"\"\"\\n        RETRIEVAL_PROMPT = \"\"\"Given this query, what specific information should we look for?\\n        Query: {query}\\n        \\n        Return as JSON with:\\n        - search_terms: list of relevant terms\\n        - filters: any filters to apply\\n        \"\"\"\\n        \\n        search_params = await JSON_llm(\\n            RETRIEVAL_PROMPT.format(query=query),\\n            dict\\n        )\\n        \\n        # Search vector database\\n        results = self.retrieval_client.query(\\n            query_texts=[query],\\n            n_results=k,\\n            where=search_params.get(\"filters\", {})\\n        )\\n        \\n        return [\\n            RetrievalResult(\\n                content=doc[\"content\"],\\n                source=doc[\"metadata\"][\"source\"],\\n                relevance=score\\n            )\\n            for doc, score in zip(results[\"documents\"], results[\"distances\"])\\n        ]\\n    \\n    async def determine_tool_needs(\\n        self,\\n        query: str,\\n        context: Dict[str, Any]\\n    ) -> List[Dict[str, Any]]:\\n        \"\"\"Determine which tools are needed\"\"\"\\n        TOOL_PROMPT = \"\"\"Given this query and context, what tools should be used?\\n        \\n        Query: {query}\\n        Context: {context}\\n        Available Tools: {tools}\\n        \\n        Return as JSON array of:\\n        - tool_name: name of tool to use\\n        - reason: why this tool is needed\\n        - parameters: parameters to pass to tool\\n        \"\"\"\\n        \\n        return await JSON_llm(\\n            TOOL_PROMPT.format(\\n                query=query,\\n                context=context,\\n                tools=self.tools\\n            ),\\n            List[Dict[str, Any]]\\n        )\\n    \\n    async def execute_tools(\\n        self,\\n        tool_calls: List[Dict[str, Any]]\\n    ) -> List[Any]:\\n        \"\"\"Execute required tools\"\"\"\\n        results = []\\n        for call in tool_calls:\\n            tool = self.tools[call[\"tool_name\"]]\\n            result = await tool[\"function\"](**call[\"parameters\"])\\n            results.append(result)\\n        return results\\n    \\n    def update_memory(\\n        self,\\n        content: str,\\n        memory_type: str,\\n        metadata: Dict[str, Any] = None\\n    ) -> None:\\n        \"\"\"Update system memory\"\"\"\\n        self.memory.append(Memory(\\n            timestamp=datetime.now(),\\n            content=content,\\n            type=memory_type,\\n            metadata=metadata or {}\\n        ))\\n    \\n    async def process_query(self, query: str) -> str:\\n        \"\"\"Process a query using augmented capabilities\"\"\"\\n        # Step 1: Retrieve relevant information\\n        relevant_info = await self.retrieve_relevant_info(query)\\n        \\n        # Step 2: Determine required tools\\n        context = {\\n            \"relevant_info\": relevant_info,\\n            \"recent_memory\": self.memory[-5:] if self.memory else []\\n        }\\n        tool_calls = await self.determine_tool_needs(query, context)\\n        \\n        # Step 3: Execute tools\\n        tool_results = await self.execute_tools(tool_calls)\\n        \\n        # Step 4: Generate response\\n        RESPONSE_PROMPT = \"\"\"Generate a response using all available information:\\n        \\n        Query: {query}\\n        Retrieved Information: {retrieved}\\n        Tool Results: {tool_results}\\n        Recent Memory: {memory}\\n        \\n        Synthesize this information into a comprehensive response.\"\"\"\\n        \\n        response = await run_llm(\\n            RESPONSE_PROMPT.format(\\n                query=query,\\n                retrieved=relevant_info,\\n                tool_results=tool_results,\\n                memory=self.memory[-5:]\\n            )\\n        )\\n        \\n        # Step 5: Update memory\\n        self.update_memory(\\n            content=response,\\n            memory_type=\"response\",\\n            metadata={\"query\": query}\\n        )\\n        \\n        return response\\n\\n# Example usage\\nasync def main():\\n    # Initialize augmented LLM\\n    llm = AugmentedLLM()\\n    \\n    # Process a complex query\\n    query = \"\"\"What was the impact of recent interest rate changes \\n    on tech company stock prices? Calculate the average percentage change \\n    and identify any significant outliers.\"\"\"\\n    \\n    response = await llm.process_query(query)\\n    print(\"Response:\", response)\\n\\nif __name__ == \"__main__\":\\n    import asyncio\\n    asyncio.run(main())',\n    typescriptCode: 'import { LLMResponse } from \\'./types\\';\\nimport { runLLM, JSONLLM, executeTool } from \\'./helpers\\';\\nimport { ChromaClient } from \\'chromadb\\';\\n\\ninterface Memory {\\n  timestamp: Date;\\n  content: string;\\n  type: string;\\n  metadata: Record<string, any>;\\n}\\n\\ninterface RetrievalResult {\\n  content: string;\\n  source: string;\\n  relevance: number;\\n}\\n\\ninterface Tool {\\n  description: string;\\n  function: (params: any) => Promise<any>;\\n}\\n\\nclass AugmentedLLM {\\n  private memory: Memory[] = [];\\n  private retrievalClient: ChromaClient;\\n  private tools: Record<string, Tool>;\\n\\n  constructor() {\\n    this.retrievalClient = new ChromaClient();\\n    this.tools = this.initializeTools();\\n  }\\n\\n  private initializeTools(): Record<string, Tool> {\\n    return {\\n      calculator: {\\n        description: \"Perform mathematical calculations\",\\n        function: this.calculate\\n      },\\n      web_search: {\\n        description: \"Search the web for information\",\\n        function: this.searchWeb\\n      },\\n      database: {\\n        description: \"Query a database\",\\n        function: this.queryDatabase\\n      }\\n    };\\n  }\\n\\n  async retrieveRelevantInfo(\\n    query: string,\\n    k: number = 5\\n  ): Promise<RetrievalResult[]> {\\n    const RETRIEVAL_PROMPT = `Given this query, what specific information should we look for?\\n    Query: ${query}\\n    \\n    Return as JSON with:\\n    - search_terms: list of relevant terms\\n    - filters: any filters to apply`;\\n\\n    const searchParams = await JSONLLM<{\\n      search_terms: string[];\\n      filters: Record<string, any>;\\n    }>(RETRIEVAL_PROMPT);\\n\\n    // Search vector database\\n    const results = await this.retrievalClient.query({\\n      queryTexts: [query],\\n      nResults: k,\\n      where: searchParams.filters\\n    });\\n\\n    return results.documents[0].map((doc: any, i: number) => ({\\n      content: doc.content,\\n      source: doc.metadata.source,\\n      relevance: results.distances[0][i]\\n    }));\\n  }\\n\\n  async determineToolNeeds(\\n    query: string,\\n    context: Record<string, any>\\n  ): Promise<Array<{\\n    tool_name: string;\\n    reason: string;\\n    parameters: Record<string, any>;\\n  }>> {\\n    const TOOL_PROMPT = `Given this query and context, what tools should be used?\\n    \\n    Query: ${query}\\n    Context: ${JSON.stringify(context)}\\n    Available Tools: ${JSON.stringify(this.tools)}\\n    \\n    Return as JSON array of:\\n    - tool_name: name of tool to use\\n    - reason: why this tool is needed\\n    - parameters: parameters to pass to tool`;\\n\\n    return await JSONLLM(TOOL_PROMPT);\\n  }\\n\\n  async executeTools(\\n    toolCalls: Array<{\\n      tool_name: string;\\n      parameters: Record<string, any>;\\n    }>\\n  ): Promise<any[]> {\\n    return await Promise.all(\\n      toolCalls.map(call => \\n        this.tools[call.tool_name].function(call.parameters)\\n      )\\n    );\\n  }\\n\\n  private updateMemory(\\n    content: string,\\n    memoryType: string,\\n    metadata: Record<string, any> = {}\\n  ): void {\\n    this.memory.push({\\n      timestamp: new Date(),\\n      content,\\n      type: memoryType,\\n      metadata\\n    });\\n  }\\n\\n  async processQuery(query: string): Promise<string> {\\n    // Step 1: Retrieve relevant information\\n    const relevantInfo = await this.retrieveRelevantInfo(query);\\n\\n    // Step 2: Determine required tools\\n    const context = {\\n      relevant_info: relevantInfo,\\n      recent_memory: this.memory.slice(-5)\\n    };\\n    const toolCalls = await this.determineToolNeeds(query, context);\\n\\n    // Step 3: Execute tools\\n    const toolResults = await this.executeTools(toolCalls);\\n\\n    // Step 4: Generate response\\n    const RESPONSE_PROMPT = `Generate a response using all available information:\\n    \\n    Query: ${query}\\n    Retrieved Information: ${JSON.stringify(relevantInfo)}\\n    Tool Results: ${JSON.stringify(toolResults)}\\n    Recent Memory: ${JSON.stringify(this.memory.slice(-5))}\\n    \\n    Synthesize this information into a comprehensive response.`;\\n\\n    const response = await runLLM(RESPONSE_PROMPT);\\n\\n    // Step 5: Update memory\\n    this.updateMemory(response, \"response\", { query });\\n\\n    return response;\\n  }\\n\\n  private async calculate(params: any): Promise<number> {\\n    // Implementation of calculator tool\\n    return 0;\\n  }\\n\\n  private async searchWeb(params: any): Promise<any> {\\n    // Implementation of web search tool\\n    return null;\\n  }\\n\\n  private async queryDatabase(params: any): Promise<any> {\\n    // Implementation of database query tool\\n    return null;\\n  }\\n}\\n\\n// Example usage\\nasync function main() {\\n  // Initialize augmented LLM\\n  const llm = new AugmentedLLM();\\n\\n  // Process a complex query\\n  const query = `What was the impact of recent interest rate changes \\n  on tech company stock prices? Calculate the average percentage change \\n  and identify any significant outliers.`;\\n\\n  const response = await llm.processQuery(query);\\n  console.log(\"Response:\", response);\\n}\\n\\nmain().catch(console.error);'\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/recipes/data/augmented-llm.ts\n"));

/***/ })

});