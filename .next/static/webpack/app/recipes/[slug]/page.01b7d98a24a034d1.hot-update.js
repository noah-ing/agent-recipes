"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/recipes/[slug]/page",{

/***/ "(app-pages-browser)/./app/recipes/data/autonomous-agent.ts":
/*!**********************************************!*\
  !*** ./app/recipes/data/autonomous-agent.ts ***!
  \**********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   autonomousAgent: function() { return /* binding */ autonomousAgent; }\n/* harmony export */ });\nconst autonomousAgent = {\n    title: \"Autonomous Agent\",\n    tag: \"Agent\",\n    description: \"The Autonomous Agent workflow represents a highly flexible and adaptable approach to problem-solving. In this model, an LLM-based agent operates with a degree of independence, making decisions, taking actions, and learning from outcomes to achieve a given goal.\",\n    explanation: \"The diagram illustrates a cyclical process of planning, execution, and learning. The agent determines the next best action based on its current understanding, carries out this action, collects feedback, and updates its knowledge or strategy based on these observations.\",\n    useCases: [\n        \"Adaptive Customer Support: Handle diverse queries, learning from each interaction to improve responses.\",\n        \"Autonomous Research Assistant: Break down research tasks, search for information, and refine approaches.\",\n        \"Self-Improving Code Generator: Write, test, and refactor code based on specifications and performance metrics.\"\n    ],\n    pythonCode: 'from typing import Dict, List, Any, Optional\\nfrom pydantic import BaseModel\\nfrom datetime import datetime\\nfrom helpers import run_llm, JSON_llm, execute_tool\\n\\nclass Action(BaseModel):\\n    \"\"\"Represents a planned action\"\"\"\\n    tool: str\\n    params: Dict[str, Any]\\n    reason: str\\n    expected_outcome: str\\n\\nclass Observation(BaseModel):\\n    \"\"\"Represents an observation from executing an action\"\"\"\\n    action: Action\\n    result: Any\\n    success: bool\\n    timestamp: datetime\\n\\nclass AgentState(BaseModel):\\n    \"\"\"Represents the agent\\'s current state\"\"\"\\n    goal: str\\n    context: Dict[str, Any]\\n    observations: List[Observation]\\n    learned_patterns: Dict[str, Any]\\n\\nclass AutonomousAgent:\\n    def __init__(self, goal: str, available_tools: Dict[str, Any]):\\n        self.state = AgentState(\\n            goal=goal,\\n            context={},\\n            observations=[],\\n            learned_patterns={}\\n        )\\n        self.tools = available_tools\\n\\n    async def plan_next_action(self) -> Optional[Action]:\\n        \"\"\"Plan the next action based on current state\"\"\"\\n        PLANNING_PROMPT = \"\"\"Given the current state and goal, determine the next best action.\\n        \\n        Goal: {goal}\\n        Context: {context}\\n        Recent Observations: {observations}\\n        Learned Patterns: {patterns}\\n        Available Tools: {tools}\\n        \\n        Return as JSON with:\\n        - tool: name of tool to use\\n        - params: parameters for the tool\\n        - reason: why this action was chosen\\n        - expected_outcome: what we expect to achieve\\n        \"\"\"\\n        \\n        # Get last 5 observations for context\\n        recent_obs = self.state.observations[-5:] if self.state.observations else []\\n        \\n        action = await JSON_llm(\\n            PLANNING_PROMPT.format(\\n                goal=self.state.goal,\\n                context=self.state.context,\\n                observations=recent_obs,\\n                patterns=self.state.learned_patterns,\\n                tools=self.tools\\n            ),\\n            Action\\n        )\\n        \\n        return action\\n\\n    async def execute_action(self, action: Action) -> Observation:\\n        \"\"\"Execute an action and record the observation\"\"\"\\n        try:\\n            result = await execute_tool(action.tool, action.params)\\n            success = True\\n        except Exception as e:\\n            result = str(e)\\n            success = False\\n        \\n        observation = Observation(\\n            action=action,\\n            result=result,\\n            success=success,\\n            timestamp=datetime.now()\\n        )\\n        \\n        self.state.observations.append(observation)\\n        return observation\\n\\n    async def learn_from_observation(self, observation: Observation) -> None:\\n        \"\"\"Update learned patterns based on observation\"\"\"\\n        LEARNING_PROMPT = \"\"\"Analyze this observation and extract patterns or insights:\\n        \\n        Action Taken: {action}\\n        Result: {result}\\n        Success: {success}\\n        \\n        Current Patterns: {patterns}\\n        \\n        Return as JSON with updated patterns dictionary.\\n        \"\"\"\\n        \\n        new_patterns = await JSON_llm(\\n            LEARNING_PROMPT.format(\\n                action=observation.action,\\n                result=observation.result,\\n                success=observation.success,\\n                patterns=self.state.learned_patterns\\n            ),\\n            Dict[str, Any]\\n        )\\n        \\n        self.state.learned_patterns.update(new_patterns)\\n\\n    async def update_context(self, observation: Observation) -> None:\\n        \"\"\"Update context based on observation\"\"\"\\n        CONTEXT_PROMPT = \"\"\"Update the context based on this observation:\\n        \\n        Current Context: {context}\\n        Observation: {observation}\\n        \\n        Return as JSON with updated context dictionary.\\n        \"\"\"\\n        \\n        new_context = await JSON_llm(\\n            CONTEXT_PROMPT.format(\\n                context=self.state.context,\\n                observation=observation\\n            ),\\n            Dict[str, Any]\\n        )\\n        \\n        self.state.context.update(new_context)\\n\\n    async def run(self, max_steps: int = 10) -> str:\\n        \"\"\"Run the agent to achieve its goal\"\"\"\\n        step = 0\\n        \\n        while step < max_steps:\\n            print(f\"\\\\nStep {step + 1}\")\\n            print(\"-\" * 40)\\n            \\n            # Plan next action\\n            action = await self.plan_next_action()\\n            if not action:\\n                print(\"No further actions needed\")\\n                break\\n            \\n            print(f\"Planned Action: {action.tool}\")\\n            print(f\"Reason: {action.reason}\")\\n            \\n            # Execute action and observe\\n            observation = await self.execute_action(action)\\n            print(f\"Success: {observation.success}\")\\n            \\n            # Learn from observation\\n            await self.learn_from_observation(observation)\\n            \\n            # Update context\\n            await self.update_context(observation)\\n            \\n            # Check if goal is achieved\\n            if await self.check_goal_achieved():\\n                print(\"\\\\nGoal achieved!\")\\n                break\\n            \\n            step += 1\\n        \\n        return self.summarize_results()\\n\\n    async def check_goal_achieved(self) -> bool:\\n        \"\"\"Check if the goal has been achieved\"\"\"\\n        CHECK_GOAL_PROMPT = \"\"\"Given the current state and goal, has the goal been achieved?\\n        \\n        Goal: {goal}\\n        Context: {context}\\n        \\n        Return true or false.\\n        \"\"\"\\n        \\n        return await JSON_llm(\\n            CHECK_GOAL_PROMPT.format(\\n                goal=self.state.goal,\\n                context=self.state.context\\n            ),\\n            bool\\n        )\\n\\n    def summarize_results(self) -> str:\\n        \"\"\"Summarize the agent\\'s results\"\"\"\\n        return f\"\"\"\\n        Goal: {self.state.goal}\\n        Steps Taken: {len(self.state.observations)}\\n        Success Rate: {\\n            sum(1 for o in self.state.observations if o.success) / \\n            len(self.state.observations) if self.state.observations else 0\\n        }\\n        Final Context: {self.state.context}\\n        \"\"\"\\n\\n# Example usage\\nasync def main():\\n    # Define available tools\\n    tools = {\\n        \"search\": \"Search for information online\",\\n        \"extract\": \"Extract specific information from text\",\\n        \"summarize\": \"Summarize lengthy content\",\\n        \"analyze\": \"Analyze data or text\",\\n        \"generate\": \"Generate new content\"\\n    }\\n    \\n    # Create agent with a research goal\\n    agent = AutonomousAgent(\\n        goal=\"Research and summarize recent developments in quantum computing\",\\n        available_tools=tools\\n    )\\n    \\n    # Run agent\\n    result = await agent.run()\\n    print(\"\\\\nFinal Results:\", result)\\n\\nif __name__ == \"__main__\":\\n    import asyncio\\n    asyncio.run(main())',\n    typescriptCode: 'import { LLMResponse } from \\'./types\\';\\nimport { runLLM, JSONLLM, executeTool } from \\'./helpers\\';\\n\\ninterface Action {\\n  tool: string;\\n  params: Record<string, any>;\\n  reason: string;\\n  expected_outcome: string;\\n}\\n\\ninterface Observation {\\n  action: Action;\\n  result: any;\\n  success: boolean;\\n  timestamp: Date;\\n}\\n\\ninterface AgentState {\\n  goal: string;\\n  context: Record<string, any>;\\n  observations: Observation[];\\n  learned_patterns: Record<string, any>;\\n}\\n\\nclass AutonomousAgent {\\n  private state: AgentState;\\n  private tools: Record<string, any>;\\n\\n  constructor(goal: string, availableTools: Record<string, any>) {\\n    this.state = {\\n      goal,\\n      context: {},\\n      observations: [],\\n      learned_patterns: {}\\n    };\\n    this.tools = availableTools;\\n  }\\n\\n  async planNextAction(): Promise<Action | null> {\\n    const PLANNING_PROMPT = `Given the current state and goal, determine the next best action.\\n    \\n    Goal: ${this.state.goal}\\n    Context: ${JSON.stringify(this.state.context)}\\n    Recent Observations: ${JSON.stringify(this.state.observations.slice(-5))}\\n    Learned Patterns: ${JSON.stringify(this.state.learned_patterns)}\\n    Available Tools: ${JSON.stringify(this.tools)}\\n    \\n    Return as JSON with:\\n    - tool: name of tool to use\\n    - params: parameters for the tool\\n    - reason: why this action was chosen\\n    - expected_outcome: what we expect to achieve\\n    `;\\n\\n    return await JSONLLM<Action>(PLANNING_PROMPT);\\n  }\\n\\n  async executeAction(action: Action): Promise<Observation> {\\n    let result: any;\\n    let success: boolean;\\n\\n    try {\\n      result = await executeTool(action.tool, action.params);\\n      success = true;\\n    } catch (error) {\\n      result = error.message;\\n      success = false;\\n    }\\n\\n    const observation: Observation = {\\n      action,\\n      result,\\n      success,\\n      timestamp: new Date()\\n    };\\n\\n    this.state.observations.push(observation);\\n    return observation;\\n  }\\n\\n  async learnFromObservation(observation: Observation): Promise<void> {\\n    const LEARNING_PROMPT = `Analyze this observation and extract patterns or insights:\\n    \\n    Action Taken: ${JSON.stringify(observation.action)}\\n    Result: ${JSON.stringify(observation.result)}\\n    Success: ${observation.success}\\n    \\n    Current Patterns: ${JSON.stringify(this.state.learned_patterns)}\\n    \\n    Return as JSON with updated patterns dictionary.\\n    `;\\n\\n    const newPatterns = await JSONLLM<Record<string, any>>(LEARNING_PROMPT);\\n    Object.assign(this.state.learned_patterns, newPatterns);\\n  }\\n\\n  async updateContext(observation: Observation): Promise<void> {\\n    const CONTEXT_PROMPT = `Update the context based on this observation:\\n    \\n    Current Context: ${JSON.stringify(this.state.context)}\\n    Observation: ${JSON.stringify(observation)}\\n    \\n    Return as JSON with updated context dictionary.\\n    `;\\n\\n    const newContext = await JSONLLM<Record<string, any>>(CONTEXT_PROMPT);\\n    Object.assign(this.state.context, newContext);\\n  }\\n\\n  async run(maxSteps: number = 10): Promise<string> {\\n    let step = 0;\\n\\n    while (step < maxSteps) {\\n      console.log(`\\\\nStep ${step + 1}`);\\n      console.log(\"-\".repeat(40));\\n\\n      // Plan next action\\n      const action = await this.planNextAction();\\n      if (!action) {\\n        console.log(\"No further actions needed\");\\n        break;\\n      }\\n\\n      console.log(`Planned Action: ${action.tool}`);\\n      console.log(`Reason: ${action.reason}`);\\n\\n      // Execute action and observe\\n      const observation = await this.executeAction(action);\\n      console.log(`Success: ${observation.success}`);\\n\\n      // Learn from observation\\n      await this.learnFromObservation(observation);\\n\\n      // Update context\\n      await this.updateContext(observation);\\n\\n      // Check if goal is achieved\\n      if (await this.checkGoalAchieved()) {\\n        console.log(\"\\\\nGoal achieved!\");\\n        break;\\n      }\\n\\n      step++;\\n    }\\n\\n    return this.summarizeResults();\\n  }\\n\\n  async checkGoalAchieved(): Promise<boolean> {\\n    const CHECK_GOAL_PROMPT = `Given the current state and goal, has the goal been achieved?\\n    \\n    Goal: ${this.state.goal}\\n    Context: ${JSON.stringify(this.state.context)}\\n    \\n    Return true or false.\\n    `;\\n\\n    return await JSONLLM<boolean>(CHECK_GOAL_PROMPT);\\n  }\\n\\n  summarizeResults(): string {\\n    const successRate = this.state.observations.length\\n      ? this.state.observations.filter(o => o.success).length / \\n        this.state.observations.length\\n      : 0;\\n\\n    return `\\n    Goal: ${this.state.goal}\\n    Steps Taken: ${this.state.observations.length}\\n    Success Rate: ${successRate}\\n    Final Context: ${JSON.stringify(this.state.context)}\\n    `;\\n  }\\n}\\n\\n// Example usage\\nasync function main() {\\n  // Define available tools\\n  const tools = {\\n    search: \"Search for information online\",\\n    extract: \"Extract specific information from text\",\\n    summarize: \"Summarize lengthy content\",\\n    analyze: \"Analyze data or text\",\\n    generate: \"Generate new content\"\\n  };\\n\\n  // Create agent with a research goal\\n  const agent = new AutonomousAgent(\\n    \"Research and summarize recent developments in quantum computing\",\\n    tools\\n  );\\n\\n  // Run agent\\n  const result = await agent.run();\\n  console.log(\"\\\\nFinal Results:\", result);\\n}\\n\\nmain().catch(console.error);'\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/recipes/data/autonomous-agent.ts\n"));

/***/ })

});