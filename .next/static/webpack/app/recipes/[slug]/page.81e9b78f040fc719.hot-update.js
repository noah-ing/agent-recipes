"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/recipes/[slug]/page",{

/***/ "(app-pages-browser)/./app/recipes/data/prompt-chaining.ts":
/*!*********************************************!*\
  !*** ./app/recipes/data/prompt-chaining.ts ***!
  \*********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   promptChaining: function() { return /* binding */ promptChaining; }\n/* harmony export */ });\nconst promptChaining = {\n    title: \"Prompt Chaining\",\n    tag: \"Workflow\",\n    description: \"Prompt Chaining is a sophisticated workflow that breaks down complex tasks into a series of smaller, manageable steps. Each step in the chain uses the output from the previous step as its input, creating a sequential and refined process.\",\n    explanation: \"In the diagram, you can see how the workflow progresses from left to right. Each block represents an LLM call, with arrows indicating the flow of information. The first LLM generates initial content based on the input. This output is then passed to the second LLM, which refines or builds upon it. Finally, the third LLM produces the final output.\",\n    useCases: [\n        \"Content Creation Pipeline: Generate an article outline, expand it into a draft, then polish it into a final version.\",\n        \"Multi-step Problem Solving: Break down a complex math problem, solve each part sequentially, then combine the results.\",\n        \"Language Translation with Refinement: Translate text to an intermediate language, then to the target language, and finally refine for cultural nuances.\"\n    ],\n    pythonCode: 'from typing import List\\nfrom helpers import run_llm \\n\\ndef serial_chain_workflow(input_query: str, prompt_chain: List[str]) -> List[str]:\\n    \"\"\"Run a serial chain of LLM calls to address the `input_query` \\n    using a list of prompts specified in `prompt_chain`.\\n    \"\"\"\\n    response_chain = []\\n    response = input_query\\n    for i, prompt in enumerate(prompt_chain):\\n        print(f\"Step {i+1}\")\\n        response = run_llm(\\n            f\"{prompt}\\\\nInput:\\\\n{response}\", \\n            model=\\'meta-llama/Meta-Llama-3.1-70B-Instruct-Turbo\\'\\n        )\\n        response_chain.append(response)\\n        print(f\"{response}\\\\n\")\\n    return response_chain\\n\\n# Example\\nquestion = \"Sally earns $12 an hour for babysitting. Yesterday, she just did 50 minutes of babysitting. How much did she earn?\"\\n\\nprompt_chain = [\\n    \"\"\"Given the math problem, ONLY extract any relevant numerical information and how it can be used.\"\"\",\\n    \"\"\"Given the numberical information extracted, ONLY express the steps you would take to solve the problem.\"\"\",\\n    \"\"\"Given the steps, express the final answer to the problem.\"\"\"\\n]\\n\\nresponses = serial_chain_workflow(question, prompt_chain)\\nfinal_answer = responses[-1]',\n    typescriptCode: \"import { LLMResponse } from './types';\\nimport { runLLM } from './helpers';\\n\\nasync function serialChainWorkflow(\\n  inputQuery: string, \\n  promptChain: string[]\\n): Promise<string[]> {\\n  const responseChain: string[] = [];\\n  let response = inputQuery;\\n\\n  for (let i = 0; i < promptChain.length; i++) {\\n    console.log(`Step ${i + 1}`);\\n    response = await runLLM({\\n      prompt: `${promptChain[i]}\\\\nInput:\\\\n${response}`,\\n      model: 'meta-llama/Meta-Llama-3.1-70B-Instruct-Turbo'\\n    });\\n    responseChain.push(response);\\n    console.log(`${response}\\\\n`);\\n  }\\n\\n  return responseChain;\\n}\\n\\n// Example\\nconst question = \\\"Sally earns $12 an hour for babysitting. Yesterday, she just did 50 minutes of babysitting. How much did she earn?\\\";\\n\\nconst promptChain = [\\n  `Given the math problem, ONLY extract any relevant numerical information and how it can be used.`,\\n  `Given the numberical information extracted, ONLY express the steps you would take to solve the problem.`,\\n  `Given the steps, express the final answer to the problem.`\\n];\\n\\nconst responses = await serialChainWorkflow(question, promptChain);\\nconst finalAnswer = responses[responses.length - 1];\"\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9yZWNpcGVzL2RhdGEvcHJvbXB0LWNoYWluaW5nLnRzIiwibWFwcGluZ3MiOiI7Ozs7QUFFTyxNQUFNQSxpQkFBeUI7SUFDcENDLE9BQU87SUFDUEMsS0FBSztJQUNMQyxhQUFhO0lBQ2JDLGFBQWE7SUFDYkMsVUFBVTtRQUNSO1FBQ0E7UUFDQTtLQUNEO0lBQ0RDLFlBQWE7SUE4QmJDLGdCQUFpQjtBQWtDbkIsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9hcHAvcmVjaXBlcy9kYXRhL3Byb21wdC1jaGFpbmluZy50cz80Mzc0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlY2lwZSB9IGZyb20gJy4vaW5kZXgnO1xyXG5cclxuZXhwb3J0IGNvbnN0IHByb21wdENoYWluaW5nOiBSZWNpcGUgPSB7XHJcbiAgdGl0bGU6IFwiUHJvbXB0IENoYWluaW5nXCIsXHJcbiAgdGFnOiBcIldvcmtmbG93XCIsXHJcbiAgZGVzY3JpcHRpb246IFwiUHJvbXB0IENoYWluaW5nIGlzIGEgc29waGlzdGljYXRlZCB3b3JrZmxvdyB0aGF0IGJyZWFrcyBkb3duIGNvbXBsZXggdGFza3MgaW50byBhIHNlcmllcyBvZiBzbWFsbGVyLCBtYW5hZ2VhYmxlIHN0ZXBzLiBFYWNoIHN0ZXAgaW4gdGhlIGNoYWluIHVzZXMgdGhlIG91dHB1dCBmcm9tIHRoZSBwcmV2aW91cyBzdGVwIGFzIGl0cyBpbnB1dCwgY3JlYXRpbmcgYSBzZXF1ZW50aWFsIGFuZCByZWZpbmVkIHByb2Nlc3MuXCIsXHJcbiAgZXhwbGFuYXRpb246IFwiSW4gdGhlIGRpYWdyYW0sIHlvdSBjYW4gc2VlIGhvdyB0aGUgd29ya2Zsb3cgcHJvZ3Jlc3NlcyBmcm9tIGxlZnQgdG8gcmlnaHQuIEVhY2ggYmxvY2sgcmVwcmVzZW50cyBhbiBMTE0gY2FsbCwgd2l0aCBhcnJvd3MgaW5kaWNhdGluZyB0aGUgZmxvdyBvZiBpbmZvcm1hdGlvbi4gVGhlIGZpcnN0IExMTSBnZW5lcmF0ZXMgaW5pdGlhbCBjb250ZW50IGJhc2VkIG9uIHRoZSBpbnB1dC4gVGhpcyBvdXRwdXQgaXMgdGhlbiBwYXNzZWQgdG8gdGhlIHNlY29uZCBMTE0sIHdoaWNoIHJlZmluZXMgb3IgYnVpbGRzIHVwb24gaXQuIEZpbmFsbHksIHRoZSB0aGlyZCBMTE0gcHJvZHVjZXMgdGhlIGZpbmFsIG91dHB1dC5cIixcclxuICB1c2VDYXNlczogW1xyXG4gICAgXCJDb250ZW50IENyZWF0aW9uIFBpcGVsaW5lOiBHZW5lcmF0ZSBhbiBhcnRpY2xlIG91dGxpbmUsIGV4cGFuZCBpdCBpbnRvIGEgZHJhZnQsIHRoZW4gcG9saXNoIGl0IGludG8gYSBmaW5hbCB2ZXJzaW9uLlwiLFxyXG4gICAgXCJNdWx0aS1zdGVwIFByb2JsZW0gU29sdmluZzogQnJlYWsgZG93biBhIGNvbXBsZXggbWF0aCBwcm9ibGVtLCBzb2x2ZSBlYWNoIHBhcnQgc2VxdWVudGlhbGx5LCB0aGVuIGNvbWJpbmUgdGhlIHJlc3VsdHMuXCIsXHJcbiAgICBcIkxhbmd1YWdlIFRyYW5zbGF0aW9uIHdpdGggUmVmaW5lbWVudDogVHJhbnNsYXRlIHRleHQgdG8gYW4gaW50ZXJtZWRpYXRlIGxhbmd1YWdlLCB0aGVuIHRvIHRoZSB0YXJnZXQgbGFuZ3VhZ2UsIGFuZCBmaW5hbGx5IHJlZmluZSBmb3IgY3VsdHVyYWwgbnVhbmNlcy5cIlxyXG4gIF0sXHJcbiAgcHl0aG9uQ29kZTogYGZyb20gdHlwaW5nIGltcG9ydCBMaXN0XHJcbmZyb20gaGVscGVycyBpbXBvcnQgcnVuX2xsbSBcclxuXHJcbmRlZiBzZXJpYWxfY2hhaW5fd29ya2Zsb3coaW5wdXRfcXVlcnk6IHN0ciwgcHJvbXB0X2NoYWluOiBMaXN0W3N0cl0pIC0+IExpc3Rbc3RyXTpcclxuICAgIFwiXCJcIlJ1biBhIHNlcmlhbCBjaGFpbiBvZiBMTE0gY2FsbHMgdG8gYWRkcmVzcyB0aGUgXFxgaW5wdXRfcXVlcnlcXGAgXHJcbiAgICB1c2luZyBhIGxpc3Qgb2YgcHJvbXB0cyBzcGVjaWZpZWQgaW4gXFxgcHJvbXB0X2NoYWluXFxgLlxyXG4gICAgXCJcIlwiXHJcbiAgICByZXNwb25zZV9jaGFpbiA9IFtdXHJcbiAgICByZXNwb25zZSA9IGlucHV0X3F1ZXJ5XHJcbiAgICBmb3IgaSwgcHJvbXB0IGluIGVudW1lcmF0ZShwcm9tcHRfY2hhaW4pOlxyXG4gICAgICAgIHByaW50KGZcIlN0ZXAge2krMX1cIilcclxuICAgICAgICByZXNwb25zZSA9IHJ1bl9sbG0oXHJcbiAgICAgICAgICAgIGZcIntwcm9tcHR9XFxcXG5JbnB1dDpcXFxcbntyZXNwb25zZX1cIiwgXHJcbiAgICAgICAgICAgIG1vZGVsPSdtZXRhLWxsYW1hL01ldGEtTGxhbWEtMy4xLTcwQi1JbnN0cnVjdC1UdXJibydcclxuICAgICAgICApXHJcbiAgICAgICAgcmVzcG9uc2VfY2hhaW4uYXBwZW5kKHJlc3BvbnNlKVxyXG4gICAgICAgIHByaW50KGZcIntyZXNwb25zZX1cXFxcblwiKVxyXG4gICAgcmV0dXJuIHJlc3BvbnNlX2NoYWluXHJcblxyXG4jIEV4YW1wbGVcclxucXVlc3Rpb24gPSBcIlNhbGx5IGVhcm5zICQxMiBhbiBob3VyIGZvciBiYWJ5c2l0dGluZy4gWWVzdGVyZGF5LCBzaGUganVzdCBkaWQgNTAgbWludXRlcyBvZiBiYWJ5c2l0dGluZy4gSG93IG11Y2ggZGlkIHNoZSBlYXJuP1wiXHJcblxyXG5wcm9tcHRfY2hhaW4gPSBbXHJcbiAgICBcIlwiXCJHaXZlbiB0aGUgbWF0aCBwcm9ibGVtLCBPTkxZIGV4dHJhY3QgYW55IHJlbGV2YW50IG51bWVyaWNhbCBpbmZvcm1hdGlvbiBhbmQgaG93IGl0IGNhbiBiZSB1c2VkLlwiXCJcIixcclxuICAgIFwiXCJcIkdpdmVuIHRoZSBudW1iZXJpY2FsIGluZm9ybWF0aW9uIGV4dHJhY3RlZCwgT05MWSBleHByZXNzIHRoZSBzdGVwcyB5b3Ugd291bGQgdGFrZSB0byBzb2x2ZSB0aGUgcHJvYmxlbS5cIlwiXCIsXHJcbiAgICBcIlwiXCJHaXZlbiB0aGUgc3RlcHMsIGV4cHJlc3MgdGhlIGZpbmFsIGFuc3dlciB0byB0aGUgcHJvYmxlbS5cIlwiXCJcclxuXVxyXG5cclxucmVzcG9uc2VzID0gc2VyaWFsX2NoYWluX3dvcmtmbG93KHF1ZXN0aW9uLCBwcm9tcHRfY2hhaW4pXHJcbmZpbmFsX2Fuc3dlciA9IHJlc3BvbnNlc1stMV1gLFxyXG4gIHR5cGVzY3JpcHRDb2RlOiBgaW1wb3J0IHsgTExNUmVzcG9uc2UgfSBmcm9tICcuL3R5cGVzJztcclxuaW1wb3J0IHsgcnVuTExNIH0gZnJvbSAnLi9oZWxwZXJzJztcclxuXHJcbmFzeW5jIGZ1bmN0aW9uIHNlcmlhbENoYWluV29ya2Zsb3coXHJcbiAgaW5wdXRRdWVyeTogc3RyaW5nLCBcclxuICBwcm9tcHRDaGFpbjogc3RyaW5nW11cclxuKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xyXG4gIGNvbnN0IHJlc3BvbnNlQ2hhaW46IHN0cmluZ1tdID0gW107XHJcbiAgbGV0IHJlc3BvbnNlID0gaW5wdXRRdWVyeTtcclxuXHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9tcHRDaGFpbi5sZW5ndGg7IGkrKykge1xyXG4gICAgY29uc29sZS5sb2coXFxgU3RlcCBcXCR7aSArIDF9XFxgKTtcclxuICAgIHJlc3BvbnNlID0gYXdhaXQgcnVuTExNKHtcclxuICAgICAgcHJvbXB0OiBcXGBcXCR7cHJvbXB0Q2hhaW5baV19XFxcXG5JbnB1dDpcXFxcblxcJHtyZXNwb25zZX1cXGAsXHJcbiAgICAgIG1vZGVsOiAnbWV0YS1sbGFtYS9NZXRhLUxsYW1hLTMuMS03MEItSW5zdHJ1Y3QtVHVyYm8nXHJcbiAgICB9KTtcclxuICAgIHJlc3BvbnNlQ2hhaW4ucHVzaChyZXNwb25zZSk7XHJcbiAgICBjb25zb2xlLmxvZyhcXGBcXCR7cmVzcG9uc2V9XFxcXG5cXGApO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHJlc3BvbnNlQ2hhaW47XHJcbn1cclxuXHJcbi8vIEV4YW1wbGVcclxuY29uc3QgcXVlc3Rpb24gPSBcIlNhbGx5IGVhcm5zICQxMiBhbiBob3VyIGZvciBiYWJ5c2l0dGluZy4gWWVzdGVyZGF5LCBzaGUganVzdCBkaWQgNTAgbWludXRlcyBvZiBiYWJ5c2l0dGluZy4gSG93IG11Y2ggZGlkIHNoZSBlYXJuP1wiO1xyXG5cclxuY29uc3QgcHJvbXB0Q2hhaW4gPSBbXHJcbiAgXFxgR2l2ZW4gdGhlIG1hdGggcHJvYmxlbSwgT05MWSBleHRyYWN0IGFueSByZWxldmFudCBudW1lcmljYWwgaW5mb3JtYXRpb24gYW5kIGhvdyBpdCBjYW4gYmUgdXNlZC5cXGAsXHJcbiAgXFxgR2l2ZW4gdGhlIG51bWJlcmljYWwgaW5mb3JtYXRpb24gZXh0cmFjdGVkLCBPTkxZIGV4cHJlc3MgdGhlIHN0ZXBzIHlvdSB3b3VsZCB0YWtlIHRvIHNvbHZlIHRoZSBwcm9ibGVtLlxcYCxcclxuICBcXGBHaXZlbiB0aGUgc3RlcHMsIGV4cHJlc3MgdGhlIGZpbmFsIGFuc3dlciB0byB0aGUgcHJvYmxlbS5cXGBcclxuXTtcclxuXHJcbmNvbnN0IHJlc3BvbnNlcyA9IGF3YWl0IHNlcmlhbENoYWluV29ya2Zsb3cocXVlc3Rpb24sIHByb21wdENoYWluKTtcclxuY29uc3QgZmluYWxBbnN3ZXIgPSByZXNwb25zZXNbcmVzcG9uc2VzLmxlbmd0aCAtIDFdO2BcclxufTtcclxuIl0sIm5hbWVzIjpbInByb21wdENoYWluaW5nIiwidGl0bGUiLCJ0YWciLCJkZXNjcmlwdGlvbiIsImV4cGxhbmF0aW9uIiwidXNlQ2FzZXMiLCJweXRob25Db2RlIiwidHlwZXNjcmlwdENvZGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/recipes/data/prompt-chaining.ts\n"));

/***/ })

});