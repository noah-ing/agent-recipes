"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/recipes/[slug]/page",{

/***/ "(app-pages-browser)/./app/recipes/data/orchestrator-workers.ts":
/*!**************************************************!*\
  !*** ./app/recipes/data/orchestrator-workers.ts ***!
  \**************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   orchestratorWorkers: function() { return /* binding */ orchestratorWorkers; }\n/* harmony export */ });\nconst orchestratorWorkers = {\n    title: \"Orchestrator-workers\",\n    tag: \"Workflow\",\n    description: \"The Orchestrator-Workers pattern is a hierarchical workflow where a central 'orchestrator' LLM oversees and coordinates multiple 'worker' LLMs. This approach is particularly effective for complex, multi-step tasks that require different types of expertise or processing.\",\n    explanation: \"In the diagram, the orchestrator receives the initial input and task, analyzes the problem, breaks it down into subtasks, and delegates these to specialized worker LLMs. Each worker focuses on its assigned subtask and returns its results to the orchestrator, which then synthesizes these individual results into a final output.\",\n    useCases: [\n        \"Complex Research Tasks: Orchestrator breaks down research questions and coordinates data collection, analysis, and summary tasks.\",\n        \"Multi-component Software Development: Plan architecture and delegate frontend, backend, and database design tasks.\",\n        \"Interdisciplinary Problem Solving: Coordinate between workers specializing in different domains for comprehensive solutions.\"\n    ],\n    pythonCode: 'from typing import List, Dict, Any\\nfrom pydantic import BaseModel\\nfrom helpers import run_llm, JSON_llm\\n\\nclass Task(BaseModel):\\n    \"\"\"Represents a subtask in the workflow\"\"\"\\n    description: str\\n    worker: str\\n    priority: int\\n    dependencies: List[int] = []\\n\\nclass WorkerResult(BaseModel):\\n    \"\"\"Represents the result from a worker\"\"\"\\n    task_id: int\\n    result: str\\n    status: str\\n\\nasync def orchestrator_workflow(project_request: str) -> str:\\n    \"\"\"Orchestrate multiple LLM workers to complete a complex project.\"\"\"\\n    \\n    # Step 1: Orchestrator analyzes and breaks down the project\\n    PLANNING_PROMPT = \"\"\"Break down this project request into specific tasks.\\n    For each task specify:\\n    1. Task description\\n    2. Which worker should handle it (choose from: researcher, architect, developer, reviewer)\\n    3. Priority (1-5, 1 being highest)\\n    4. Dependencies (task IDs that must be completed first)\\n    Return as JSON array of tasks.\"\"\"\\n\\n    tasks = JSON_llm(\\n        f\"{PLANNING_PROMPT}\\\\nProject: {project_request}\",\\n        List[Task]\\n    )\\n    \\n    # Sort tasks by priority and dependencies\\n    tasks.sort(key=lambda x: (len(x.dependencies), x.priority))\\n    \\n    # Step 2: Execute tasks through workers\\n    results: Dict[int, WorkerResult] = {}\\n    \\n    for i, task in enumerate(tasks):\\n        # Wait for dependencies to complete\\n        for dep in task.dependencies:\\n            if dep not in results or results[dep].status != \"completed\":\\n                continue\\n                \\n        # Select appropriate worker prompt based on role\\n        worker_prompts = {\\n            \"researcher\": \"Research and provide information about:\",\\n            \"architect\": \"Design the architecture for:\",\\n            \"developer\": \"Write code to implement:\",\\n            \"reviewer\": \"Review and provide feedback on:\"\\n        }\\n        \\n        # Execute worker task\\n        worker_result = await run_llm(\\n            f\"{worker_prompts[task.worker]}\\\\n{task.description}\\\\n\\\\n\" +\\n            \"Previous relevant results:\\\\n\" +\\n            \"\\\\n\".join([\\n                f\"Task {dep}: {results[dep].result}\"\\n                for dep in task.dependencies\\n                if dep in results\\n            ]),\\n            model=f\"specialized/{task.worker}-llm\"\\n        )\\n        \\n        # Store result\\n        results[i] = WorkerResult(\\n            task_id=i,\\n            result=worker_result,\\n            status=\"completed\"\\n        )\\n    \\n    # Step 3: Orchestrator synthesizes final result\\n    SYNTHESIS_PROMPT = \"\"\"Synthesize the results of all completed tasks into a \\n    coherent final deliverable. Ensure all components work together and meet the \\n    original project requirements.\"\"\"\\n    \\n    final_result = await run_llm(\\n        f\"{SYNTHESIS_PROMPT}\\\\n\\\\nProject Request: {project_request}\\\\n\\\\n\" +\\n        \"Task Results:\\\\n\" +\\n        \"\\\\n\".join([\\n            f\"Task {i}: {result.result}\"\\n            for i, result in results.items()\\n        ])\\n    )\\n    \\n    return final_result\\n\\n# Example usage\\nasync def main():\\n    project = \"\"\"\\n    Create a web application for task management with the following requirements:\\n    1. User authentication\\n    2. CRUD operations for tasks\\n    3. Task categorization and filtering\\n    4. Responsive design\\n    5. Data persistence\\n    \"\"\"\\n    \\n    result = await orchestrator_workflow(project)\\n    print(\"Final Project Deliverable:\\\\n\", result)\\n\\nif __name__ == \"__main__\":\\n    import asyncio\\n    asyncio.run(main())',\n    typescriptCode: 'import { LLMResponse } from \\'./types\\';\\nimport { runLLM, JSONLLM } from \\'./helpers\\';\\n\\ninterface Task {\\n  description: string;\\n  worker: string;\\n  priority: number;\\n  dependencies: number[];\\n}\\n\\ninterface WorkerResult {\\n  task_id: number;\\n  result: string;\\n  status: string;\\n}\\n\\nasync function orchestratorWorkflow(projectRequest: string): Promise<string> {\\n  // Step 1: Orchestrator analyzes and breaks down the project\\n  const PLANNING_PROMPT = `Break down this project request into specific tasks.\\n  For each task specify:\\n  1. Task description\\n  2. Which worker should handle it (choose from: researcher, architect, developer, reviewer)\\n  3. Priority (1-5, 1 being highest)\\n  4. Dependencies (task IDs that must be completed first)\\n  Return as JSON array of tasks.`;\\n\\n  const tasks = await JSONLLM<Task[]>(\\n    `${PLANNING_PROMPT}\\\\nProject: ${projectRequest}`\\n  );\\n\\n  // Sort tasks by priority and dependencies\\n  tasks.sort((a, b) => \\n    (a.dependencies.length - b.dependencies.length) || (a.priority - b.priority)\\n  );\\n\\n  // Step 2: Execute tasks through workers\\n  const results: Record<number, WorkerResult> = {};\\n\\n  for (let i = 0; i < tasks.length; i++) {\\n    const task = tasks[i];\\n\\n    // Wait for dependencies to complete\\n    const dependenciesComplete = task.dependencies.every(\\n      dep => dep in results && results[dep].status === \"completed\"\\n    );\\n    if (!dependenciesComplete) continue;\\n\\n    // Select appropriate worker prompt based on role\\n    const workerPrompts: Record<string, string> = {\\n      researcher: \"Research and provide information about:\",\\n      architect: \"Design the architecture for:\",\\n      developer: \"Write code to implement:\",\\n      reviewer: \"Review and provide feedback on:\"\\n    };\\n\\n    // Execute worker task\\n    const workerResult = await runLLM({\\n      prompt: `${workerPrompts[task.worker]}\\\\n${task.description}\\\\n\\\\n` +\\n        \"Previous relevant results:\\\\n\" +\\n        task.dependencies\\n          .filter(dep => dep in results)\\n          .map(dep => `Task ${dep}: ${results[dep].result}`)\\n          .join(\"\\\\n\"),\\n      model: `specialized/${task.worker}-llm`\\n    });\\n\\n    // Store result\\n    results[i] = {\\n      task_id: i,\\n      result: workerResult,\\n      status: \"completed\"\\n    };\\n  }\\n\\n  // Step 3: Orchestrator synthesizes final result\\n  const SYNTHESIS_PROMPT = `Synthesize the results of all completed tasks into a \\n  coherent final deliverable. Ensure all components work together and meet the \\n  original project requirements.`;\\n\\n  const finalResult = await runLLM({\\n    prompt: `${SYNTHESIS_PROMPT}\\\\n\\\\nProject Request: ${projectRequest}\\\\n\\\\n` +\\n      \"Task Results:\\\\n\" +\\n      Object.entries(results)\\n        .map(([i, result]) => `Task ${i}: ${result.result}`)\\n        .join(\"\\\\n\")\\n  });\\n\\n  return finalResult;\\n}\\n\\n// Example usage\\nasync function main() {\\n  const project = `\\n    Create a web application for task management with the following requirements:\\n    1. User authentication\\n    2. CRUD operations for tasks\\n    3. Task categorization and filtering\\n    4. Responsive design\\n    5. Data persistence\\n  `;\\n\\n  const result = await orchestratorWorkflow(project);\\n  console.log(\"Final Project Deliverable:\\\\n\", result);\\n}\\n\\nmain().catch(console.error);'\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/recipes/data/orchestrator-workers.ts\n"));

/***/ })

});