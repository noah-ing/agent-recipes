"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/recipes/[slug]/page",{

/***/ "(app-pages-browser)/./app/recipes/data/routing.ts":
/*!*************************************!*\
  !*** ./app/recipes/data/routing.ts ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   routing: function() { return /* binding */ routing; }\n/* harmony export */ });\nconst routing = {\n    title: \"Routing\",\n    tag: \"Low Latency\",\n    description: \"Routing is an efficient workflow designed to direct inputs to the most appropriate LLM or processing pipeline based on the nature of the task. This approach optimizes performance by ensuring that each query is handled by the most suitable model or process.\",\n    explanation: \"The diagram illustrates the routing process. At the top, we have the input, which is first analyzed by a classifier. Based on the classification result, the input is then directed to one of several specialized LLMs or processes. Each path is optimized for a specific type of task, ensuring efficient and accurate processing.\",\n    useCases: [\n        \"Customer Support Triage: Automatically categorize and route customer inquiries to the appropriate department.\",\n        \"Multi-lingual Processing: Route text to language-specific models for translation or analysis based on detected language.\",\n        \"Complexity-based Model Selection: Direct simple queries to faster, smaller models and complex queries to more powerful models.\"\n    ],\n    pythonCode: 'from pydantic import BaseModel, Field\\nfrom typing import Literal, Dict\\nfrom helpers import run_llm, JSON_llm\\n\\n\\ndef router_workflow(input_query: str, routes: Dict[str, str]) -> str:\\n    \"\"\"Given a `input_query` and a dictionary of `routes` containing options and details for each.\\n    Selects the best model for the task and return the response from the model.\\n    \"\"\"\\n    ROUTER_PROMPT = \"\"\"Given a user prompt/query: {user_query}, select the best option out of the following routes:\\n    {routes}. Answer only in JSON format.\"\"\"\\n\\n    # Create a schema from the routes dictionary\\n    class Schema(BaseModel):\\n        route: Literal[tuple(routes.keys())]\\n\\n        reason: str = Field(\\n            description=\"Short one-liner explanation why this route was selected for the task in the prompt/query.\"\\n        )\\n\\n    # Call LLM to select route\\n    selected_route = JSON_llm(\\n        ROUTER_PROMPT.format(user_query=input_query, routes=routes), Schema\\n    )\\n    print(\\n        f\"Selected route:{selected_route[\\'route\\']}\\\\nReason: {selected_route[\\'reason\\']}\\\\n\"\\n    )\\n\\n    # Use LLM on selected route.\\n    # Could also have different prompts that need to be used for each route.\\n    response = run_llm(user_prompt=input_query, model=selected_route[\"route\"])\\n    print(f\"Response: {response}\\\\n\")\\n\\n    return response\\n\\n\\n# Example usage\\nprompt_list = [\\n    \"Produce python snippet to check to see if a number is prime or not.\",\\n    \"Plan and provide a short itenary for a 2 week vacation in Europe.\",\\n    \"Write a short story about a dragon and a knight.\",\\n]\\n\\nmodel_routes = {\\n    \"Qwen/Qwen2.5-Coder-32B-Instruct\": \"Best model choice for code generation tasks.\",\\n    \"Gryphe/MythoMax-L2-13b\": \"Best model choice for story-telling, role-playing and fantasy tasks.\",\\n    \"Qwen/QwQ-32B-Preview\": \"Best model for reasoning, planning and multi-step tasks\",\\n}\\n\\nfor i, prompt in enumerate(prompt_list):\\n    print(f\"Task {i+1}: {prompt}\\\\n\")\\n    print(20 * \"==\")\\n    router_workflow(prompt, model_routes)',\n    typescriptCode: 'import { BaseModel, Field } from \\'pydantic\\';\\nimport { runLLM, JSONLLM } from \\'./helpers\\';\\n\\ninterface Routes {\\n  [key: string]: string;\\n}\\n\\ninterface RouteSchema {\\n  route: string;\\n  reason: string;\\n}\\n\\nasync function routerWorkflow(inputQuery: string, routes: Routes): Promise<string> {\\n  const ROUTER_PROMPT = `Given a user prompt/query: ${inputQuery}, select the best option out of the following routes:\\n  ${JSON.stringify(routes, null, 2)}. Answer only in JSON format.`;\\n\\n  // Call LLM to select route\\n  const selectedRoute = await JSONLLM<RouteSchema>(\\n    ROUTER_PROMPT,\\n    {\\n      route: {\\n        type: \\'string\\',\\n        enum: Object.keys(routes)\\n      },\\n      reason: {\\n        type: \\'string\\',\\n        description: \\'Short one-liner explanation why this route was selected for the task in the prompt/query.\\'\\n      }\\n    }\\n  );\\n\\n  console.log(\\n    `Selected route: ${selectedRoute.route}\\\\nReason: ${selectedRoute.reason}\\\\n`\\n  );\\n\\n  // Use LLM on selected route\\n  const response = await runLLM({\\n    userPrompt: inputQuery,\\n    model: selectedRoute.route\\n  });\\n  console.log(`Response: ${response}\\\\n`);\\n\\n  return response;\\n}\\n\\n// Example usage\\nconst promptList = [\\n  \"Produce python snippet to check to see if a number is prime or not.\",\\n  \"Plan and provide a short itenary for a 2 week vacation in Europe.\",\\n  \"Write a short story about a dragon and a knight.\",\\n];\\n\\nconst modelRoutes = {\\n  \"Qwen/Qwen2.5-Coder-32B-Instruct\": \"Best model choice for code generation tasks.\",\\n  \"Gryphe/MythoMax-L2-13b\": \"Best model choice for story-telling, role-playing and fantasy tasks.\",\\n  \"Qwen/QwQ-32B-Preview\": \"Best model for reasoning, planning and multi-step tasks\",\\n};\\n\\nasync function main() {\\n  for (let i = 0; i < promptList.length; i++) {\\n    console.log(`Task ${i + 1}: ${promptList[i]}\\\\n`);\\n    console.log(\"=\".repeat(20));\\n    await routerWorkflow(promptList[i], modelRoutes);\\n  }\\n}\\n\\nmain().catch(console.error);'\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/recipes/data/routing.ts\n"));

/***/ })

});